xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = c(-2, 2), ylim = c(-2, 2),
col = ifelse(data$y > 0.5, 'green', 'yellow'),
ann = FALSE)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(data$y > 0.5, 'green', 'yellow'),
ann = FALSE)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(data2$y > 0.5, 'green', 'yellow'),
ann = FALSE)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(data$y > 0.5, 'green', 'yellow'),
ann = FALSE)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(svm.pred2 > 0.5, 'green', 'yellow'),
ann = FALSE)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(svm.pred2 > 0.5, 'green', 'yellow'),
ann = FALSE)
legend('top',
col = c('blue', 'red', 'green', 'orange'),
c('訓練データ (y > 0.5)', '訓練データ (y <= 0.5)', 'テストデータ (y > 0.5)', 'テストデータ (y <= 0.5)'),
pch = 16)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(svm.pred2 > 0.5, 'green', 'yellow'),
ann = FALSE)
legend(col = c('blue', 'red', 'green', 'yellow'),
c('訓練データ (y > 0.5)', '訓練データ (y <= 0.5)', 'テストデータ (y > 0.5)', 'テストデータ (y <= 0.5)'),
pch = 16)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(data$x1, data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(data2$x1, data2$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(svm.pred2 > 0.5, 'green', 'yellow'),
ann = FALSE)
legend('topleft',
col = c('blue', 'red', 'green', 'yellow'),
c('訓練データ (y > 0.5)', '訓練データ (y <= 0.5)', 'テストデータ (y > 0.5)', 'テストデータ (y <= 0.5)'),
pch = 16)
svm.pred2 <- predict(svm.res, data2)
svm.pred2
knitr::opts_chunk$set(echo = TRUE)
library(kernlab)
train_data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0)
)
train_data
svm.res <- ksvm(y ~ x1 + x2, data = train_data, type = 'nu-svc')
test_data <- data.frame(
x1 = c(2, -1),
x2 = c(0, -1)
)
test_data
knitr::opts_chunk$set(echo = TRUE)
library(kernlab)
train_data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0)
)
train_data
svm.res <- ksvm(y ~ x1 + x2, data = train_data, type = 'nu-svc')
svm.res
svm.pred <- predict(svm.res, train_data)
svm.pred
test_data <- data.frame(
x1 = c(2, -1),
x2 = c(0, -1)
)
test_data
svm.pred2 <- predict(svm.res, test_data)
svm.pred2
xlim, ylim <-  c(-2, 2), c(-2, 2)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(train_data$x1, train_data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(train_data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(test_data$x1, test_data$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(test_svm_pred > 0.5, 'green', 'yellow'),
ann = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(kernlab)
train_data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0)
)
train_data
svm_model <- ksvm(y ~ x1 + x2, data = train_data, type = 'nu-svc')
svm_model
train_svm_pred <- predict(svm_model, train_data)
train_svm_pred
test_data <- data.frame(
x1 = c(2, -1),
x2 = c(0, -1)
)
test_data
test_svm_pred <- predict(svm_model, test_data)
test_svm_pred
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
plot(train_data$x1, train_data$x2,
xlim = xlim, ylim = ylim, pch = 16,
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(train_data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(test_data$x1, test_data$x2, pch = 16,
xlim = xlim, ylim = ylim,
col = ifelse(test_svm_pred > 0.5, 'green', 'yellow'),
ann = FALSE)
legend('topleft',
col = c('blue', 'red', 'green', 'yellow'),
c('訓練データ (y > 0.5)', '訓練データ (y <= 0.5)', 'テストデータ (y > 0.5)', 'テストデータ (y <= 0.5)'),
pch = 16)
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
pch <- 16
plot(train_data$x1, train_data$x2,
xlim = xlim, ylim = ylim, pch = pch,
main = '',
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(train_data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(test_data$x1, test_data$x2, pch = pch,
xlim = xlim, ylim = ylim,
col = ifelse(test_svm_pred > 0.5, 'green', 'yellow'),
ann = FALSE)
legend('topleft', pch = pch,
col = c('blue', 'red', 'green', 'yellow'),
c('訓練データ (y > 0.5)', '訓練データ (y <= 0.5)', 'テストデータ (y > 0.5)', 'テストデータ (y <= 0.5)'))
xlim <-  c(-2, 2)
ylim <-  c(-2, 2)
pch <- 16
plot(train_data$x1, train_data$x2,
xlim = xlim, ylim = ylim, pch = pch,
main = 'SVMによる訓練データとテストデータの予測',
xlab = 'x coordinate', ylab = 'y coordinate',
col = ifelse(train_data$y > 0.5, 'blue', 'red'))
par(new = TRUE)
plot(test_data$x1, test_data$x2, pch = pch,
xlim = xlim, ylim = ylim,
col = ifelse(test_svm_pred > 0.5, 'green', 'yellow'),
ann = FALSE)
legend('topleft', pch = pch,
col = c('blue', 'red', 'green', 'yellow'),
c('訓練データ (y > 0.5)', '訓練データ (y <= 0.5)', 'テストデータ (y > 0.5)', 'テストデータ (y <= 0.5)'))
data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(1, 0, 0, 0)
)
data
install.packages('randomForest')
path='C:/Users/ootmo/Downloads/randomForest_4.7-1.1.tar.gz'
install.packages(path, repos = NULL, type="source")
library(randomForest)
train_data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(1, 0, 0, 0)
)
train_data
rf.model <- randomForest(y ~ x1 + x2, data = train_data)
rf.model
test_data <- data.frame(
x1 = c(0.5, 0.5, 1.2, 1.2),
x2 = c(0.5, 1.2, 0.5, 1.2)
)
rf.pred <- predict(rf.model, test_data)
rf.pred
plot(rf.model$x1, rf.model$x2, col = as.numeric(rf.model$y),
xlim = c(0, 2), ylim = c(0, 2),
xlab = 'x coordinate', ylab = 'y coordinate')
par(new = TRUE)
plot(rf.pred$x1, rf.pred$x2, col = as.numeric(rf.pred) + 2,
xlim = c(0, 2), ylim = c(0, 2), ann = FALSE,
xlab = '', ylab = '')
plot(rf.model$x1, rf.model$x2, col = as.numeric(rf.model$y),
xlim = c(0, 2), ylim = c(0, 2),
xlab = 'x coordinate', ylab = 'y coordinate')
par(new = TRUE)
plot(rf.pred$x1, rf.pred$x2, col = as.numeric(rf.pred) + 2,
xlim = c(0, 2), ylim = c(0, 2), ann = FALSE,
xlab = '', ylab = '')
rf.model
str(rf.model)
plot(train_data$x1, train_data$x2, col = as.numeric(train_data$y),
xlim = c(0, 2), ylim = c(0, 2),
xlab = 'x coordinate', ylab = 'y coordinate')
par(new = TRUE)
plot(test_data$x1, test_data$x2, col = as.numeric(rf.pred) + 2,
xlim = c(0, 2), ylim = c(0, 2), ann = FALSE,
xlab = '', ylab = '')
pch = 16
plot(train_data$x1, train_data$x2, col = as.numeric(train_data$y),
xlim = c(0, 2), ylim = c(0, 2), pch = pch,
xlab = 'x coordinate', ylab = 'y coordinate')
par(new = TRUE)
plot(test_data$x1, test_data$x2, col = as.numeric(rf.pred) + 2,
xlim = c(0, 2), ylim = c(0, 2), ann = FALSE, pch = pch,
xlab = '', ylab = '')
pch = 16
xylim = c(0, 2)
plot(train_data$x1, train_data$x2, col = as.numeric(train_data$y),
xlim = xylim, ylim = xylim, pch = pch,
xlab = 'x coordinate', ylab = 'y coordinate')
par(new = TRUE)
plot(test_data$x1, test_data$x2, col = as.numeric(rf.pred) + 2,
xlim = xylim, ylim = xylim, ann = FALSE, pch = pch,
xlab = '', ylab = '')
train.data <- data.frame(
x1 = c(38.78, 145.05, 152.69, 160.11, 165.37, 168.61),
x2 = c(33.54, 37.92, 43.52, 49.04, 53.41, 59.24),
y = c(0.35, 8.88, 8.48, 7.92, 7.53, 7.56)
)
train.data
rf.ra.model <- randomForest(y ~ x1 + x2, data = train.data)
rf.ra.model
rf.ra.pred <- predict(rf.ra.res, train.data)
rf.ra.pred <- predict(rf.ra.model, train.data)
rf.ra.pred
test.data <- data.frame(
x1 = c(150, 160, 170),
x2 = c(35, 40, 50)
)
test.data
rf.ra.pred2 <- predict(rf.ra.model, test.data)
rf.ra.pred2
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
train_data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0)
)
train_data
rf.model <- randomForest(y ~ x1 + x2, data = train_data)
rf.model
pred.train <- predict(rf.model, test_data)
pred.train
train.data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0)
)
train.data
rf.model <- randomForest(y ~ x1 + x2, data = train.data)
rf.model
pred.train <- predict(rf.model, train.data)
pred.train
train.data
test.data <- data.frame(
x1 = c(2, -1),
x2 = c(0, -1)
)
test.data
test.pred <- predict(rf.model, test.data)
test.pred
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
train.data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0)
)
train.data
rf.model <- randomForest(y ~ x1 + x2, data = train.data)
rf.model
pred.train <- predict(rf.model, train.data)
pred.train
test.data <- data.frame(
x1 = c(2, -1),
x2 = c(0, -1)
)
test.data
test.pred <- predict(rf.model, test.data)
test.pred
train.data <- data.frame(
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = as.factor(c(0, 1, 1, 0))
)
train.data
rf.model <- randomForest(y ~ x1 + x2, data = train.data)
rf.model
pred.train <- predict(rf.model, train.data)
pred.train
test.data <- data.frame(
x1 = c(2, -1),
x2 = c(0, -1)
)
test.data
test.pred <- predict(rf.model, test.data)
test.pred
test.data$pred <- test.pred
test.data
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
data <- list(J = 8,
y = c(28, 8, -3, -7, -1, 1, 18, 12),
sigma = c(15, 10, 16, 11, 9, 11, 10, 18)
)
fit <- stan(file = 'C:/Users/ootmo/Downloads/school.stan',
data = data)
print(fit)
plot(fit)
pairs(fit, pars = c('mu', 'tau', 'lp__'))
la <- extract(fit, permutated = TRUE)
la <- extract(fit, permuted = TRUE)
mu <- la$mu
a <- extract(fit, permuted = FALSE)
a2 <- as.array(fit)
m <- as.matrix(fit)
d <- as.data.frame(fit)
mu
a
a2
,
m
d
View(la)
View(mu)
View(d)
View(m)
View(a2)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
data <- list(J = 8,
y = c(28, 8, -3, -7, -1, 1, 18, 12),
sigma = c(15, 10, 16, 11, 9, 11, 10, 18))
fit <- stan(file = 'C:/Users/ootmo/Downloads/school.stan',
data = data)
print(fit)
plot(fit)
pairs(fit, pars = c('mu', 'tau', 'lp__'))
la <- extract(fit, permuted = TRUE)
mu <- la$mu
a <- extract(fit, permuted = FALSE)
a2 <- as.array(fit)
m <- as.matrix(fit)
d <- as.data.frame(fit)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(BayesFactor)
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import arviz as az
import my_funcs as mf
num_subjects = 30
dataframes = {}
for i in range(num_subjects):
dataframes[i] = mf.create_df()
# 30(samling rate) x 60(seconds) x 5(mins) = 9000
# 1800 timestamps per second
# events happen every 30 seconds (900)
df = dataframes[0]
dataframes_hit = {}
for x in range(num_subjects):
df_hit = pd.DataFrame()
empty = []
for i, hit in enumerate(dataframes[x]['AOI_Hit']):
if i % 900 != 0 or i == 0:
empty.append(hit)
else:
df_hit[f'epoch{int(i/900)}'] = empty
empty = [hit]
dataframes_hit[x] = df_hit
ratios_per_epoch = {}
for i in range(num_subjects):
ratios = []
for j in range(len(dataframes_hit[i].columns)):
ratios.append(sum(dataframes_hit[i][f'epoch{j+1}']) / len(dataframes_hit[i][f'epoch{j+1}']))
ratios_per_epoch[i] = ratios
colnames = [f'epoch{i+1}' for i in range(len(dataframes_hit[i].columns))]
ratios_per_epoch = pd.DataFrame.from_dict(ratios_per_epoch, orient='index', columns=colnames)
ratios_per_epoch.head()
quit
a <- c(py$ratios_per_epoch['epoch1'])
b <- c(py$ratios_per_epoch['epoch2'])
res <- ttestBF(a, b)
a <- c(py$ratios_per_epoch['epoch1'])
b <- c(py$ratios_per_epoch['epoch2'])
res <- ttestBF(a$epoch1, b$epoch2)
res
a <- py$ratios_per_epoch['epoch1']
a
a <- py$ratios_per_epoch['epoch1']
b <- py$ratios_per_epoch['epoch2']
res <- ttestBF(a, b)
a <- py$ratios_per_epoch['epoch1']
b <- py$ratios_per_epoch['epoch2']
res <- ttestBF(a$epoch1, b$epoch2)
res
!git add r_and_python_BayesFactor.py
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(BayesFactor)
setwd("C:/Users/ootmo/OneDrive/Documents/修論_AIと信頼感/py")
use_condaenv("C:/Users/ootmo/miniconda3/envs/pymc/python.exe")
source_python("my_funcs.py")
ratios_per_epoch <- make_df_ratios_per_epoch()
BFs <- c()
for (i in 1:(length(ratios_per_epoch)-1)) {
epoch1 <- ratios_per_epoch[, i]
epoch2 <- ratios_per_epoch[, i + 1]
res <- ttestBF(epoch1, epoch2)
BF <- extractBF(res, onlybf = TRUE)
BFs <- append(BFs, BF)
}
BFs
plot(BFs)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(BayesFactor)
setwd("C:/Users/ootmo/OneDrive/Documents/修論_AIと信頼感/py")
use_condaenv("C:/Users/ootmo/miniconda3/envs/pymc/python.exe")
source_python("my_funcs.py")
subjects_data <- make_df_subjects_data(as.integer(30))
BFs <- c()
for (i in 1:(length(subjects_data)-1)) {
epoch1 <- subjects_data[, i]
epoch2 <- subjects_data[, i + 1]
res <- ttestBF(epoch1, epoch2)
BF <- extractBF(res, onlybf = TRUE)
BFs <- append(BFs, BF)
}
BFs
plot(BFs)
View(subjects_data)
plot(subjects_data$epoch0)
View(subjects_data)
plot(subjects_data[0,])
plot(subjects_data[,0])
reticulate::repl_python()
# The main analysis
import os
os.chdir("C:/Users/ootmo/OneDrive/Documents/修論_AIと信頼感/py")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import arviz as az
import my_funcs as mf
from gc import collect as gc
az.style.use('arviz-darkgrid')
subjects_data = mf.make_df_subjects_data(100)
subjects_data.head()
